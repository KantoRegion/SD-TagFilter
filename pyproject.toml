[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[project]
name = "sd-tagfilter"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
authors = [
    { email = "hwal.choe@vivident.xyz" }
]
requires-python = ">=3.12"
dependencies = [
    "pydantic>=2",
    "pyyaml",
]

[tool.uv.sources]
sd-tagfilter = { workspace = true }

[dependency-groups]
dev = [
    "coverage>=7.10.1",
    "pytest>=8.4.1",
    "pytest-xdist>=3.8.0",
]
lint = [
    "pyright>=1.1.403",
    "ruff>=0.12.7",
]


[tool.hatch.build.targets.wheel]
packages = ["sd_tagfilter"]

[tool.ruff]
line-length = 120
target-version = "py39"
include = [
    "sd_tagfilter/**/*.py",
    "examples/**/*.py",
    "tests/**/*.py",
]

[tool.ruff.lint]
extend-select = [
    "Q",
    "RUF100",
    "RUF018", # https://docs.astral.sh/ruff/rules/assignment-in-assert/
    "C90",
    "UP",
    "I",
    "D",
    "TID251",
]
flake8-quotes = { inline-quotes = "single", multiline-quotes = "double" }
mccabe = { max-complexity = 15 }
ignore = [
    "D100", # ignore missing docstring in module
    "D102", # ignore missing docstring in public method
    "D104", # ignore missing docstring in public package
    "D105", # ignore missing docstring in magic methods
    "D107", # ignore missing docstring in __init__ methods
    "D415", # First line should end with a period, question mark, or exclamation point
    "UP",   # pyupgrade
]

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = ["pydantic_ai"]
# weird issue with ruff thinking fasta2a is still editable
known-third-party = ["fasta2a"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.TypedDict".msg = "Use typing_extensions.TypedDict instead."

[tool.ruff.format]
# don't format python in docstrings, pytest-examples takes care of it
docstring-code-format = false
quote-style = "single"

[tool.ruff.lint.per-file-ignores]
"examples/**/*.py" = ["D101", "D103"]
"tests/**/*.py" = ["D"]

[tool.pyright]
pythonVersion = "3.12"
typeCheckingMode = "strict"
reportMissingTypeStubs = false
reportUnnecessaryIsInstance = false
reportUnnecessaryTypeIgnoreComment = true
reportMissingModuleSource = false
include = [
    "sd_tagfilter",
    "examples",
    "tests",
]
venvPath = '.'
venv = ".venv"
# see https://github.com/microsoft/pyright/issues/7771 - we don't want to error on decorated functions in tests
# which are not otherwise used
executionEnvironments = [
    { root = "tests", reportUnusedFunction = false, reportPrivateImportUsage = false },
]
exclude = [
]
extraPaths = []


[tool.pytest.ini_options]
testpaths = ["tests"]
xfail_strict = true
filterwarnings = [
    "error",
    # random resource warnings; I suspect these are coming from vendor SDKs when running examples..
    "ignore:unclosed <socket:ResourceWarning",
    "ignore:unclosed event loop:ResourceWarning",
]

# https://coverage.readthedocs.io/en/latest/config.html#run
[tool.coverage.run]
# required to avoid warnings about files created by create_module fixture
include = [
    "sd_tagfilter/**/*.py",
    "tests/**/*.py",
]
omit = [
]
branch = true
# Disable include-ignored warnings as --source is enabled automatically causing a self conflict as per:
# https://github.com/pytest-dev/pytest-cov/issues/532
# https://github.com/pytest-dev/pytest-cov/issues/369
# This prevents coverage being generated by pytest-cov which has direct editor support in VS Code,
# making it super useful to check coverage while writing tests.
disable_warnings = ["include-ignored"]

[tool.coverage.paths]
# Allow CI run assets to be downloaded an replicated locally.
source = [
    ".",
]

# https://coverage.readthedocs.io/en/latest/config.html#report
[tool.coverage.report]
skip_covered = true
show_missing = true
ignore_errors = true
precision = 2
exclude_lines = [
    # `# pragma: no cover` is standard marker for code that's not covered, this will error if code is covered
    'pragma: no cover',
    # use `# pragma: lax no cover` if you want to ignore cases where (some of) the code is covered
    'pragma: lax no cover',
    'raise NotImplementedError',
    'if TYPE_CHECKING:',
    'if typing.TYPE_CHECKING:',
    '@overload',
    '@deprecated',
    '@typing.overload',
    '@abstractmethod',
    '\(Protocol\):$',
    'typing.assert_never',
    '$\s*assert_never\(',
    'if __name__ == .__main__.:',
    'except ImportError as _import_error:',
    '$\s*pass$',
    'assert False',
]
